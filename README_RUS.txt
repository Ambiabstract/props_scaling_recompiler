Описание:
	
	props_scaling_recompiler - это автоматический рекомпилятор ассетов, позволяющий вам скейлить пропы и/или конвертировать их в prop_static не выходя из Hammer++.
	
	Если вы работаете с Source SDK 2013 и часто пользуетесь prop_scalable - этот инструмент может быть вам полезен, т.к. prop_scalable это динамическая сущность, а значит она потребляет энтдату, не отбрасывакт лайтмап тени, на ней не запекается вертекс лайтинг, её коллизия не скейлится вместе с визуальной геометрией.
	
	Главный референс - фича uniformscale у prop_static из SDK для CS:GO.
	Главная цель инструмента - избавить художника уровней от prop_scalable и ручной рекомпиляции моделей.
	
	Поддерживается только Hammer++. Не гарантируется работа под другие редакторы.


Работа совместно с Propper++
	
	В Propper++ есть функция скейла статик пропов, причём он умеет скейлить ассеты по отдельным осям. Также он умеет сшивать модели в один prop_static по аналогии Static Prop Combine из SDK CS:GO и многое другое.
	
	Однако у propper++ есть три ключевых недостатка для нас: нет превью ассета до его создания, пути вводятся вручную, нет конвертации в статик пропы.
	
	Вместо отдельного меню мы используем подход с энтитями на карте, которые легко расставлять и изменять. Превью пропов доступно пользователю сразу, а поскейленные/сконвертированные ассеты появляются только в процессе компиляции карты и автоматически сохраняются неподалёку от оригинальных моделей, упрощая менеджмент ассетов в будущем.
	
	Короче говоря, эти инструменты не исключают друг друга, а дополняют.


Установка:

	1. Сделать чай.
	
	2. Кинуть все .exe файлы и fgd в папку bin, где лежит studiomdl.exe. Например:
	"C:\Program Files (x86)\Steam\steamapps\common\Source SDK Base 2013 Singleplayer\bin\" (без кавычек).
	
	3. Открыть Hammer. Перейти в "Tools -> Options -> Game Configuration", добавить "props_scaling_recompiler.fgd" в список "Game Data files" и нажать "OK". Обратите внимание на выбранный проект в выпадающем списке Configuration, там должен быть ваш проект! Добавить этот fgd нужно для всех проектов, где вы планируете использовать инструмент!
	
	4. Нажать F9 (Run Map) и перейти в Expert mode, если вдруг вы в режиме Normal. Здесь нужно изменить настройки компиляции карты.
	
	5. Нажимаем New чтобы добавить ещё один этап.
	Если вы используете VMFii или любой другой инструмент, который дублирует ваш VMF чтобы потом компилить - ставьте наш новый пункт после них. Например если вы используете только VMFii, то наш пункт должен быть вторым в списке.
	Если вы не используете VMFii и других таких инструментов - перетаскивайте наш пункт в самое начало.
	
	6. В Command Properties указываем Command. Это должен быть путь к props_scaling_recompiler.exe, например: "C:\Program Files (x86)\Steam\steamapps\common\Source SDK Base 2013 Singleplayer\bin\props_scaling_recompiler.exe" (без кавычек).
	Путь к этому файлу можно указать не вручную, а нажив кнопку "Cmds -> Executable" и затем через проводник выбрать наш исполняемый файл.
	
	7. Теперь надо указать Parameters. Дефолтные параметры будут такими:
	"-game $gamedir -vmf_in $path\$file.vmf -vmf_out $path\psr_temp\$file.vmf -subfolders 1 -force_recompile 0" (без кавычек).
	Важно обратить внимание на следующие параметры:
	-vmf_in $path\$file.vmf - такой путь должен быть, если вы не используете VMFii и другие программы, которые создают копию vmf чтобы в ней что-то поменять и компилить копию. Если же вы используете VMFii и подобные инструменты, то надо указать путь к тому vmf, который выдаётся прошлым инструментом на выход. Например "-vmf_in $path\inst_fix\$file.vmf", если условный VMFii выдаёт свой vmf в папку inst_fix.
	-vmf_out $path\psr_temp\$file.vmf - это тот vmf, который будет выдавать props_scaling_recompiler и который надо указать в последующих пунктах Compile/run commands!
	-subfolders 1 - класть поскейленные версии пропов в отдельную подпапку (1 - да, 0 - нет).
	-force_recompile 0 - перекомпилировать все поскейленные пропы которые есть на уровне (1 - да, 0 - нет). Нужно на случай, если оригинальная модель изменилась, например.
	
	8. Пройтись по Compile/run commands и указать в Parameters верные пути. Должен быть указан тот путь, который props_scaling_recompiler выдаёт на выход.


Пример использования:

	1. Создаём новую сущность.
	
	2. Назначаем ей класс prop_static_scalable.
	
	3. Производим настройку. Помимо привычных настроек для prop_static у нас теперь есть Model Scale. Задаём значение скейла как множитель, т.е. 2 будет означать увеличение пропа в 2 раза (имя нового ассета в контенте будет с постфиксом "_scaled_200", т.е. 200% от оригинального размера).
	Примечание: это справедливо для статических и большинства динамических пропов, но не в отношении физик пропов. По какой-то причине физик пропы скейлятся не в N раз, а в N^2 раз. Т.е. увеличение в 2 раза будет на самом деле увеличивать модель в 4 раза, model scale 4 будет увеличивать модель в 16 раз. Эта ошибка находится где-то в движке. В контент будет положена модель с именем из model scale, а не с настоящими значениями скейла.
	
	4. Компилим карту. После того как инструмент сделает свою работу - в контенте появится новая статическая модель с другим скейлом.
	
	5. Если компиляция прошла успешно, в игре вас будет ждать поскейленная версия модели.


Известные проблемы:

	1. Если у вас в контенте есть ассеты с одинаковым именем, но в разных папках - это может привести к фатальной ошибке и "вылету" программы. Эта проблема будет исправлена в будущем.
	
	2. В некоторых случаях динамические и физические пропы будут иметь некорректный визуал и/или коллизию. Часть этих проблем удастся исправить в будущем, но не все. В некоторых случаях потребуется переделка оригинального ассета.
	
	3. Возможны фатальные ошибки при компиляции некоторых динамических пропов, например "models/props_c17/door02_double.mdl". Получится ли исправить это в будущем - пока что неизвестно.


Дальнейшие планы:

	1. Исправление критических ошибок.
	
	2. Выложить исходный код.
	
	3. Уменьшить размер исполняемого файла.
	
	4. Сущность нового класса - скейлящиеся физические пропы с сохранением корректной коллизии и конвертацией любых пропов в физический проп.
	
	5. Сущность нового класса - скейлящиеся динамические пропы с сохранением корректной коллизии и конвертацией любых пропов в динамический проп.
	
	6. Аналог Static Prop Combine. Сшиватель нескольких моделей в один статик проп. Такой функционал уже имеется в Propper++ для Hammer++, но есть несколько идей как можно улучшить такой функционал.

	
Благодарности:

	Спасибо ficool2 за Hammer++ https://ficool2.github.io/HammerPlusPlus-Website/
	Спасибо UltraTechX за CrowbarCommandLineDecomp https://github.com/UltraTechX/Crowbar-Command-Line
	Спасибо craftablescience (Laura Lewis) и контрибьютерам за vpkeditcli.exe https://github.com/craftablescience/VPKEdit
	Спасибо aptekarr, MyCbEH и v3sp4 за реквест, тестирование и предложения по улучшению.